bash-4.1$ vi auditMailSend.sh 
java -cp /usr/share/java/mysql-connector-java.jar:/opt/cloudera/parcels/CDH/jars/poi-3.10.1.jar:/home/gpabdadmin/bin/HiveAuditor.jar com.citi.eap.audit.AuditDataSender
yesterday=`date --date '1day ago' +%Y_%m_%d`
#yesterday='2017_06_13'
exsist=`ls -al /home/gpabdadmin/bin | grep audit_`
if [ -n "$exsist" ]; then
   echo "This mail is Hue Audit mail"  | mailx -a "/home/gpabdadmin/bin/audit_"$yesterday".xls" -s "This mail is Hue Audit mail" -r noreply@`hostname` dl.cto.kr.big.data.monitoring@imcap.ap.ssmb.com,sc08262@imcap.ap.ssmb.com
rm  /home/gpabdadmin/bin/audit_"$yesterday".xls
else
   echo "Hue Audit data not found"  | mailx -s " Hue Audit data not found" -r noreply@`hostname` dl.cto.kr.big.data.monitoring@imcap.ap.ssmb.com,sc08262@imcap.ap.ssmb.com
fi


package com.citi.eap.audit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;



import com.mysql.jdbc.Statement;

public class AuditDataSender {

	
	public static void main(String[] args) {
		Connection	conn=null;
		PreparedStatement pstmt=null;
		ResultSet rs=null;
		try {
			String sYesterday=DateTime.addDays(DateTime.getFormatString("yyyy_MM_dd"),-1,"yyyy_MM_dd");
			//String sYesterday="2017_06_13";
			Class.forName("com.mysql.jdbc.Driver");
			conn= DriverManager.getConnection("jdbc:mysql://bdicr101x07h2:3411/nav","nav","Nav_kru");
			StringBuilder sqlBuilder= new StringBuilder();
			sqlBuilder.append("SELECT from_unixtime(EVENT_TIME/1000) as EVENT_TIME, ");
			sqlBuilder.append("USERNAME, ");
			sqlBuilder.append("IP_ADDR, ");
			sqlBuilder.append("OPERATION, ");
			sqlBuilder.append("OPERATION_TEXT, ");
			sqlBuilder.append("DATABASE_NAME, ");
			sqlBuilder.append("TABLE_NAME, ");
			sqlBuilder.append("RESOURCE_PATH ");
			sqlBuilder.append("FROM nav.HIVE_AUDIT_EVENTS_");
			sqlBuilder.append(sYesterday);
			sqlBuilder.append(" WHERE USERNAME IN ('KL19249','YC58787') ");
			sqlBuilder.append("  AND OPERATION='QUERY' ");

			pstmt=conn.prepareStatement(sqlBuilder.toString());
			rs=pstmt.executeQuery();
            ArrayList arrRow=new ArrayList();
            ArrayList arrCol=new ArrayList();
            while(rs.next()){
				arrRow.add(new ObjAudit(rs.getString("EVENT_TIME"),
		                  rs.getString("USERNAME"),
		                  rs.getString("IP_ADDR"),
		                  rs.getString("OPERATION"),
		                  rs.getString("OPERATION_TEXT"),
		                  rs.getString("DATABASE_NAME"),
		                  rs.getString("TABLE_NAME"),
		                  rs.getString("RESOURCE_PATH")));
		    }
			arrCol.add("EVENT_TIME");
			arrCol.add("USERNAME");
			arrCol.add("IP_ADDR");
			arrCol.add("OPERATION");
			arrCol.add("OPERATION_TEXT");
			arrCol.add("DATABASE_NAME");
			arrCol.add("TABLE_NAME");
			arrCol.add("RESOURCE_PATH");	
			ExcelAdapter ea=new ExcelAdapter();
			
			if(arrRow.size()>0){
			   ea.getExcelWrite("/home/gpabdadmin/bin/audit_"+sYesterday+".xls", arrRow, arrCol);
			}
		}catch (Exception e) {
			e.printStackTrace();
		}finally {
			if(rs!=null){ try {rs.close();}catch(Exception e1){e1.printStackTrace();}}
			if(pstmt!=null){ try {pstmt.close();}catch(Exception e1){e1.printStackTrace();}}
			if(conn!=null){ try {conn.close();}catch(Exception e1){e1.printStackTrace();}}
		}

	}
}


package com.citi.eap.audit;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;

import org.apache.poi.hssf.usermodel.HSSFCell; 
import org.apache.poi.hssf.usermodel.HSSFRow; 
import org.apache.poi.hssf.usermodel.HSSFSheet; 
import org.apache.poi.hssf.usermodel.HSSFWorkbook; 
public class ExcelAdapter {

	public void getExcelWrite(String sFileLocation, ArrayList arrRow,  ArrayList arrCol) { 


	 boolean bPlug = false; 
	 boolean sCheck = true; 
	 int nLength = 0; 


	 StringBuffer sbf = new StringBuffer(); 


	 int numcols = 8; 
	 int numrows = arrRow.size(); 
	 try { 
	  FileOutputStream out = new FileOutputStream(sFileLocation); 

	  //새로운 workbook 생성 
	  HSSFWorkbook wb = new HSSFWorkbook(); 
	  //새로운 sheet 생성 
	  HSSFSheet s = wb.createSheet(); 
	  HSSFRow r = null; 
	  HSSFCell c = null; 


	  for (int i = 0; i < numrows; i++) {
		   r = s.createRow(i); 
	       
		   if (i == 0) {
			    for (int j = 0; j < numcols; j++) { 
			     String sCol = arrCol.get(j).toString();
			     c = r.createCell(j);
			     c.setCellValue(sCol); 
			     nLength++; 
			    } 
		   } else {
			    for (int j = 0; j < numcols; j++) {
			     c = r.createCell(j); 
				   ObjAudit row = (ObjAudit)arrRow.get(i-1);
				      try{ 
					       switch (j) {
							case 0:
								c.setCellType(HSSFCell.CELL_TYPE_STRING);        
							    c.setCellValue(row.EVENT_TIME);
							    s.setColumnWidth(0, row.EVENT_TIME.length()*256);
								break;
							case 1:	
								c.setCellType(HSSFCell.CELL_TYPE_STRING);        
							    c.setCellValue(row.USERNAME);
							    s.setColumnWidth(1, row.USERNAME.length()*256);
							    break;
							case 2:	
								c.setCellType(HSSFCell.CELL_TYPE_STRING);        
							    c.setCellValue(row.IP_ADDR);
							    s.setColumnWidth(2, row.IP_ADDR.length()*256);
							    break;
							case 3:	
								c.setCellType(HSSFCell.CELL_TYPE_STRING);        
							    c.setCellValue(row.OPERATION);
							    s.setColumnWidth(3, row.OPERATION.length()*500);
							    break;
							case 4:	
								c.setCellType(HSSFCell.CELL_TYPE_STRING);        
							    c.setCellValue(row.OPERATION_TEXT);
							    s.setColumnWidth(4, 10000);
							    break;
							case 5:	
								c.setCellType(HSSFCell.CELL_TYPE_STRING);        
							    c.setCellValue(row.DATABASE_NAME);
							    s.setColumnWidth(5, row.DATABASE_NAME.length()*256);
							    break;
							case 6:	
								c.setCellType(HSSFCell.CELL_TYPE_STRING);        
							    c.setCellValue(row.TABLE_NAME);
							    s.setColumnWidth(6, row.TABLE_NAME.length()*256);
							    break;
							case 7:	
								c.setCellType(HSSFCell.CELL_TYPE_STRING);        
							    c.setCellValue(row.RESOURCE_PATH);
							    s.setColumnWidth(7, row.RESOURCE_PATH.length()*256);       
								break;
							}
				       
				      }catch(Exception e){ 
				      e.printStackTrace();
				      } 
			     } 
		     nLength++; 
		    } 
	   } 

	  wb.write(out); 
	  out.close(); 
	 } catch (FileNotFoundException sFile) { 
	  sCheck = false; 
	  sFile.printStackTrace(); 
	 } catch (IOException eIO) { 
	  sCheck = false; 
	  eIO.printStackTrace(); 
	 } catch (Exception err) { 
 	    err.printStackTrace(); 
	 } 


	 if (sCheck && nLength > 0) { 
	  System.out.println(" 파일을 저장하였습니다."); 
	 } 
}
}


